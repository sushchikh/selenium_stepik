поиси регистрозависимые

#some_id                    - поиск по айди (якорю)
h1                          - поиск по тэгу
[value = "Cat memes"]       - поиск по атрибуту
[name = "some name"]        - поиск по имени (выделен в отдельный поиск, хотя такой же как и по атрибуту)
[class = "card-text"]       - поиск по классу ! требует точного указания всех классов, в том порядке как в странице
.class-text                 - альтернативная нотация поиска по классу, найдет все включения
.some_class.some_one_else   - поиск по двум классам ! без пробела, через точку, порядок не важен

составные селекторы:
#post2 .second              - найдет по айди title и его потомка  ! пробел
#post2 > div.title          - указываем родство, здесь дочерний элемент  ! указание тэга элемента, можно без пробелов вокруг >

по номеру дочернего элемента
#posts > .item:nth-child(2) > .title    - по айди находим posts, в нем находим класс итем и его второй дочерний элемент и у него дочерний класс title


find_element_by_id - поиск по уникальному атрибуту id элемента. Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло, и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;
find_element_by_css_selector - поиск элемента с помощью правил на основе CSS. Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки и задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов, то скорее всего вы будете использовать именно этот метод в ваших тестах;
find_element_by_xpath - поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
find_element_by_name - поиск по атрибуту name элемента;
find_element_by_tag_name - поиск элемента по названию тега элемента;
find_element_by_class_name - поиск по значению атрибута class;
find_element_by_link_text - поиск ссылки на странице по полному совпадению;
find_element_by_partial_link_text - поиск ссылки на странице, если текст селектора совпадает с любой частью текста ссылки.


Поиск элемента с использоваением:
from selenium.webdriver.common.by import By

By.ID – поиск по уникальному атрибуту id элемента;
By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
By.XPATH – поиск элементов с помощью языка запросов XPath;
By.NAME – поиск по атрибуту name элемента;
By.TAG_NAME – поиск по названию тега;
By.CLASS_NAME – поиск по атрибуту class элемента;
By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.







Если элемент не был найден за отведенное время, то мы получим NoSuchElementException.
Если элемент был найден в момент поиска, но при последующем обращении к элементу DOM изменился, то получим StaleElementReferenceException. Например, мы нашли элемент Кнопка и через какое-то время решили выполнить с ним уже известный нам метод click. Если кнопка за это время была скрыта скриптом, то метод применять уже бесполезно — элемент "устарел" (stale) и мы увидим исключение.
Если элемент был найден в момент поиска, но сам элемент невидим (например, имеет нулевые размеры), и реальный пользователь не смог бы с ним взаимодействовать, то получим ElementNotVisibleException.




